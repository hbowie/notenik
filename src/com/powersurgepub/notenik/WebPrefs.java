/*
 * Copyright 2013 - 2014 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.notenik;

  import com.powersurgepub.psutils.*;

/**
 Preferences for generating web pages. 

 @author Herb Bowie
 */
public class WebPrefs 
    extends javax.swing.JPanel {
  
  public static final String CSS_HREF = "css-href";
  
  public static final String CSS_HREF_DEFAULT 
      = "http://fonts.googleapis.com/css?family=Merriweather+Sans:400,700";
  
  public static final String FONT_FAMILY = "font-family";
  
  public static final String FONT_FAMILY_DEFAULT
      = "Merriweather Sans";
  
  public static final String FONT_SIZE = "font-size";
  
  public static final String FONT_SIZE_DEFAULT
      = "100%";
  
  private NotenikMainFrame      main;

  private boolean           setupComplete = false;

  /**
   Creates new form WebPrefs
   */
  public WebPrefs(NotenikMainFrame main) {
    this.main = main;
    initComponents();
    webCSShrefText.setText
        (UserPrefs.getShared().getPref(CSS_HREF, CSS_HREF_DEFAULT));
    webFontFamilyText.setText
        (UserPrefs.getShared().getPref(FONT_FAMILY, FONT_FAMILY_DEFAULT));
    webFontSizeText.setText
        (UserPrefs.getShared().getPref(FONT_SIZE, FONT_SIZE_DEFAULT));
    setupComplete = true;
  }
  
  public void savePrefs() {
    UserPrefs.getShared().setPref
        (FONT_FAMILY, webFontFamilyText.getText());
    UserPrefs.getShared().setPref
        (CSS_HREF, webCSShrefText.getText());
    UserPrefs.getShared().setPref
        (FONT_SIZE, webFontSizeText.getText());
  }
  
  public String getFontFamily() {
    return webFontFamilyText.getText();
  }
  
  public String getFontSize() {
    return webFontSizeText.getText();
  }
  
  public String getCSShref() {
    return webCSShrefText.getText();
  }
  
  private void resetToDefaults () {
    webCSShrefText.setText(CSS_HREF_DEFAULT);
    webFontFamilyText.setText(FONT_FAMILY_DEFAULT);
    webFontSizeText.setText(FONT_SIZE_DEFAULT);
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    webCSShrefLabel = new javax.swing.JLabel();
    webCSShrefScrollPane = new javax.swing.JScrollPane();
    webCSShrefText = new javax.swing.JTextArea();
    webFontFamilyLabel = new javax.swing.JLabel();
    webFontFamilyText = new javax.swing.JTextField();
    webFontSizeLabel = new javax.swing.JLabel();
    webFontSizeText = new javax.swing.JTextField();
    webResetToDefaultsButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());

    webCSShrefLabel.setText("Link to Stylesheet for Fonts:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(webCSShrefLabel, gridBagConstraints);

    webCSShrefText.setColumns(20);
    webCSShrefText.setLineWrap(true);
    webCSShrefText.setRows(3);
    webCSShrefText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        webCSShrefTextFocusLost(evt);
      }
    });
    webCSShrefScrollPane.setViewportView(webCSShrefText);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
    add(webCSShrefScrollPane, gridBagConstraints);

    webFontFamilyLabel.setText("Font Family:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(webFontFamilyLabel, gridBagConstraints);

    webFontFamilyText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        webFontFamilyTextActionPerformed(evt);
      }
    });
    webFontFamilyText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        webFontFamilyTextFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(webFontFamilyText, gridBagConstraints);

    webFontSizeLabel.setText("Font Size:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(webFontSizeLabel, gridBagConstraints);

    webFontSizeText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        webFontSizeTextActionPerformed(evt);
      }
    });
    webFontSizeText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        webFontSizeTextFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(webFontSizeText, gridBagConstraints);

    webResetToDefaultsButton.setText("Reset to Defaults");
    webResetToDefaultsButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        webResetToDefaultsButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(webResetToDefaultsButton, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void webFontFamilyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webFontFamilyTextActionPerformed
    UserPrefs.getShared().setPref
        (FONT_FAMILY, webFontFamilyText.getText());
  }//GEN-LAST:event_webFontFamilyTextActionPerformed

  private void webFontFamilyTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_webFontFamilyTextFocusLost
    UserPrefs.getShared().setPref
      (FONT_FAMILY, webFontFamilyText.getText());
  }//GEN-LAST:event_webFontFamilyTextFocusLost

  private void webCSShrefTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_webCSShrefTextFocusLost
    UserPrefs.getShared().setPref
        (CSS_HREF, webCSShrefText.getText());
  }//GEN-LAST:event_webCSShrefTextFocusLost

  private void webResetToDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webResetToDefaultsButtonActionPerformed
    resetToDefaults();
  }//GEN-LAST:event_webResetToDefaultsButtonActionPerformed

  private void webFontSizeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webFontSizeTextActionPerformed
    UserPrefs.getShared().setPref
        (FONT_SIZE, webFontSizeText.getText());
  }//GEN-LAST:event_webFontSizeTextActionPerformed

  private void webFontSizeTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_webFontSizeTextFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_webFontSizeTextFocusLost

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel webCSShrefLabel;
  private javax.swing.JScrollPane webCSShrefScrollPane;
  private javax.swing.JTextArea webCSShrefText;
  private javax.swing.JLabel webFontFamilyLabel;
  private javax.swing.JTextField webFontFamilyText;
  private javax.swing.JLabel webFontSizeLabel;
  private javax.swing.JTextField webFontSizeText;
  private javax.swing.JButton webResetToDefaultsButton;
  // End of variables declaration//GEN-END:variables
}
