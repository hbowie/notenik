/*
 * Copyright 2009 - 2013 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.notenik;

  import com.powersurgepub.psutils.*;
  import com.powersurgepub.xos2.*;
  import java.io.*;
  import javax.swing.*;

/**
   Favorites Preferences for URL Union.

   @author Herb Bowie
 */
public class FavoritesPrefs
    extends javax.swing.JPanel {

  // Prefs explicitly set by the user in this window
  public static final String LIST_TAB_SELECTED            = "list-tab-sel";
  public static final String OPEN_STARTUP_AT_LAUNCH       = "open-startup";
  public static final String FAVORITES_TAGS               = "favorites-tags";
  public static final String FAVORITES_COLUMNS            = "favorites-columns";
  public static final String FAVORITES_ROWS               = "favorites-rows";
  public static final String FAVORITES_HOME               = "favorites-home";

  // Other prefs used by URL Union
  public static final String PREFS_LEFT    = "left";
  public static final String PREFS_TOP     = "top";
  public static final String PREFS_WIDTH   = "width";
  public static final String PREFS_HEIGHT  = "height";
  public static final String LAST_FILE     = "last-file";
  public static final String BACKUP_FOLDER = "backup-folder";

  private ProgramVersion    programVersion = ProgramVersion.getShared();

  private NotenikMainFrame      main;

  private boolean           setupComplete = false;

  /** Creates new form FavoritesPrefs */
  public FavoritesPrefs(NotenikMainFrame main) {

    this.main = main;
    initComponents();

    String lastFileString
        = UserPrefs.getShared().getPref (LAST_FILE, "");
    File lastFile;
    String defaultFilePath = "";
    if (lastFileString.length() > 0) {
      lastFile = new File (lastFileString);
      if (lastFile.exists()
          && lastFile.isFile()
          && lastFile.canRead()) {
        File parent = lastFile.getParentFile();
        defaultFilePath = parent.getPath();
      }
    }
    
    openStartupCheckBox.setSelected
        (UserPrefs.getShared().getPrefAsBoolean(OPEN_STARTUP_AT_LAUNCH, true));
    
    favoritesTagsText.setText
        (UserPrefs.getShared().getPref(FAVORITES_TAGS, "Favorites"));
    
    favoritesHomeLinkText.setText 
        (UserPrefs.getShared().getPref(FAVORITES_HOME, "../index.html"));

    favoritesColumnCountSlider.setValue
        (UserPrefs.getShared().getPrefAsInt(FAVORITES_COLUMNS, 4));

    favoritesRowCountSlider.setValue
        (UserPrefs.getShared().getPrefAsInt(FAVORITES_ROWS, 30));

    setupComplete = true;
  }

  private void warnRelaunch() {
    JOptionPane.showMessageDialog (
        this,
        "You may need to Quit and relaunch "
            + XOS.getShared().getProgramName()
            + " for your preferences to take effect.",
        "Relaunch Warning",
        JOptionPane.WARNING_MESSAGE);
  }

  public void savePrefs() {

  }
  
  public boolean isOpenStartup() {
    return openStartupCheckBox.isSelected();
  }
  
  public String getFavoritesTags() {
    return favoritesTagsText.getText();
  }
  
  public String getFavoritesHome() {
    return favoritesHomeLinkText.getText();
  }

  public int getFavoritesColumns () {
    return favoritesColumnCountSlider.getValue();
  }

  public int getFavoritesRows () {
    return favoritesRowCountSlider.getValue();
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    openStartupLabel = new javax.swing.JLabel();
    openStartupCheckBox = new javax.swing.JCheckBox();
    favoritesTagsLabel = new javax.swing.JLabel();
    favoritesTagsText = new javax.swing.JTextField();
    favoritesColumnCountLabel = new javax.swing.JLabel();
    favoritesColumnCountSlider = new javax.swing.JSlider();
    favoriteRowCountLabel = new javax.swing.JLabel();
    favoritesRowCountSlider = new javax.swing.JSlider();
    favoritesHomeLinkLabel = new javax.swing.JLabel();
    favoritesHomeLinkText = new javax.swing.JTextField();

    setLayout(new java.awt.GridBagLayout());

    openStartupLabel.setText("Open Startup Tags?");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(openStartupLabel, gridBagConstraints);

    openStartupCheckBox.setText("Open Startup Tags at Program Launch?");
    openStartupCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openStartupCheckBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    add(openStartupCheckBox, gridBagConstraints);

    favoritesTagsLabel.setText("Favorites Tags:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(favoritesTagsLabel, gridBagConstraints);

    favoritesTagsText.setText("Favorites");
    favoritesTagsText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        favoritesTagsTextActionPerformed(evt);
      }
    });
    favoritesTagsText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        favoritesTagsTextFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(favoritesTagsText, gridBagConstraints);

    favoritesColumnCountLabel.setText("Favorites Columns:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(favoritesColumnCountLabel, gridBagConstraints);

    favoritesColumnCountSlider.setMajorTickSpacing(1);
    favoritesColumnCountSlider.setMaximum(6);
    favoritesColumnCountSlider.setMinimum(1);
    favoritesColumnCountSlider.setPaintLabels(true);
    favoritesColumnCountSlider.setSnapToTicks(true);
    favoritesColumnCountSlider.setToolTipText("Set the number of columns to appear on the favorites page");
    favoritesColumnCountSlider.setValue(4);
    favoritesColumnCountSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        favoritesColumnCountSliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    add(favoritesColumnCountSlider, gridBagConstraints);

    favoriteRowCountLabel.setText("Favorites Rows:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(favoriteRowCountLabel, gridBagConstraints);

    favoritesRowCountSlider.setMajorTickSpacing(5);
    favoritesRowCountSlider.setMaximum(50);
    favoritesRowCountSlider.setMinimum(20);
    favoritesRowCountSlider.setMinorTickSpacing(1);
    favoritesRowCountSlider.setPaintLabels(true);
    favoritesRowCountSlider.setPaintTicks(true);
    favoritesRowCountSlider.setSnapToTicks(true);
    favoritesRowCountSlider.setToolTipText("Set the maximum number of rows to appear in each column on the favorites page");
    favoritesRowCountSlider.setValue(30);
    favoritesRowCountSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        favoritesRowCountSliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
    add(favoritesRowCountSlider, gridBagConstraints);

    favoritesHomeLinkLabel.setText("Home Link:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(favoritesHomeLinkLabel, gridBagConstraints);

    favoritesHomeLinkText.setText("../index.html");
    favoritesHomeLinkText.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        favoritesHomeLinkTextActionPerformed(evt);
      }
    });
    favoritesHomeLinkText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        favoritesHomeLinkTextFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(favoritesHomeLinkText, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

private void favoritesColumnCountSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_favoritesColumnCountSliderStateChanged
  if (! favoritesColumnCountSlider.getValueIsAdjusting()) {
    UserPrefs.getShared().setPref(FAVORITES_COLUMNS, favoritesColumnCountSlider.getValue());
  }
}//GEN-LAST:event_favoritesColumnCountSliderStateChanged

private void favoritesRowCountSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_favoritesRowCountSliderStateChanged
  if (! favoritesRowCountSlider.getValueIsAdjusting()) {
    UserPrefs.getShared().setPref(FAVORITES_ROWS, favoritesRowCountSlider.getValue());
  }
}//GEN-LAST:event_favoritesRowCountSliderStateChanged

private void openStartupCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openStartupCheckBoxActionPerformed
  UserPrefs.getShared().setPref
      (OPEN_STARTUP_AT_LAUNCH, openStartupCheckBox.isSelected());
}//GEN-LAST:event_openStartupCheckBoxActionPerformed

  private void favoritesTagsTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favoritesTagsTextActionPerformed
    UserPrefs.getShared().setPref
        (FAVORITES_TAGS, favoritesTagsText.getText());
  }//GEN-LAST:event_favoritesTagsTextActionPerformed

  private void favoritesTagsTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_favoritesTagsTextFocusLost
    UserPrefs.getShared().setPref
        (FAVORITES_TAGS, favoritesTagsText.getText());
  }//GEN-LAST:event_favoritesTagsTextFocusLost

  private void favoritesHomeLinkTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favoritesHomeLinkTextActionPerformed
    UserPrefs.getShared().setPref
        (FAVORITES_HOME, favoritesHomeLinkText.getText());
  }//GEN-LAST:event_favoritesHomeLinkTextActionPerformed

  private void favoritesHomeLinkTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_favoritesHomeLinkTextFocusLost
    UserPrefs.getShared().setPref
        (FAVORITES_HOME, favoritesHomeLinkText.getText());
  }//GEN-LAST:event_favoritesHomeLinkTextFocusLost


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel favoriteRowCountLabel;
  private javax.swing.JLabel favoritesColumnCountLabel;
  private javax.swing.JSlider favoritesColumnCountSlider;
  private javax.swing.JLabel favoritesHomeLinkLabel;
  private javax.swing.JTextField favoritesHomeLinkText;
  private javax.swing.JSlider favoritesRowCountSlider;
  private javax.swing.JLabel favoritesTagsLabel;
  private javax.swing.JTextField favoritesTagsText;
  private javax.swing.JCheckBox openStartupCheckBox;
  private javax.swing.JLabel openStartupLabel;
  // End of variables declaration//GEN-END:variables

}
