/*
 * Copyright 2014 - 2016 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.notenik;

  import com.powersurgepub.psfiles.*;
  import com.powersurgepub.psutils.*;
  import com.powersurgepub.xos2.*;
  import java.io.*;
  import javax.swing.*;

/**
 Display and save user prefs for saving HTML versions of notes to a separate
 folder. 

 @author Herb Bowie
 */
public class HTMLPrefs 
    extends javax.swing.JPanel {
  
  private NotenikMainFrame      main;
  
  private FileSpec              collection = null;
  
  private boolean syncSetting = false;

  /**
   Creates new form FolderSyncPrefs
   */
  public HTMLPrefs(NotenikMainFrame main) {
    this.main = main;
    initComponents();
  }
  
  public void setCollection(FileSpec collection) {
    this.collection = collection;
    htmlFolderTextField.setText("");
    if (collection != null) {
      htmlFolderTextField.setText(collection.getHTMLFolder());
      collectionTextField.setText(collection.getPath());
    } // end if collection not null
  }
  
  private void setHTMLFolder (File folder) {
    try {
      String folderString = folder.getCanonicalPath();
      setHTMLFolder(folderString);
    } catch (java.io.IOException e) {
      setHTMLFolder(folder.toString());
    }
    
  }
  
  private void setHTMLFolder (String folderString) {
    htmlFolderTextField.setText(folderString);
    savePrefs();
  }
  
  public String getHTMLFolder() {
    return htmlFolderTextField.getText();
  }
  
  public void savePrefs() {
    File htmlFolder = new File(htmlFolderTextField.getText());
    if (htmlFolderTextField.getText().trim().length() == 0
        || (htmlFolder.exists() 
          && htmlFolder.canRead()
          && htmlFolder.canWrite())) {
      collection.setHTMLFolder(htmlFolderTextField.getText());
    } 
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    folderLabel = new javax.swing.JLabel();
    folderBrowseButton = new javax.swing.JButton();
    htmlFolderTextField = new javax.swing.JTextField();
    collectionLabel = new javax.swing.JLabel();
    collectionTextField = new javax.swing.JLabel();
    saveButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());

    folderLabel.setText("Folder:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
    add(folderLabel, gridBagConstraints);

    folderBrowseButton.setText("Browse...");
    folderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        folderBrowseButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(folderBrowseButton, gridBagConstraints);

    htmlFolderTextField.setColumns(60);
    htmlFolderTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        htmlFolderTextFieldActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    add(htmlFolderTextField, gridBagConstraints);

    collectionLabel.setText("Collection:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 8, 4, 4);
    add(collectionLabel, gridBagConstraints);

    collectionTextField.setText(" ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
    add(collectionTextField, gridBagConstraints);

    saveButton.setText("Save");
    saveButton.setMinimumSize(new java.awt.Dimension(100, 29));
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(12, 4, 4, 4);
    add(saveButton, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void folderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderBrowseButtonActionPerformed
    XFileChooser chooser = new XFileChooser();
    chooser.setDialogTitle("Specify Folder to Use For Generated HTML");
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setCurrentDirectory(collection.getFile().getParentFile());
    File chosen = chooser.showOpenDialog(main);
    if (chosen != null) {
      setHTMLFolder(chosen);
    } // end if user chose a folder
  }//GEN-LAST:event_folderBrowseButtonActionPerformed

  private void htmlFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlFolderTextFieldActionPerformed
    savePrefs();
  }//GEN-LAST:event_htmlFolderTextFieldActionPerformed

  private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    savePrefs();
  }//GEN-LAST:event_saveButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel collectionLabel;
  private javax.swing.JLabel collectionTextField;
  private javax.swing.JButton folderBrowseButton;
  private javax.swing.JLabel folderLabel;
  private javax.swing.JTextField htmlFolderTextField;
  private javax.swing.JButton saveButton;
  // End of variables declaration//GEN-END:variables
}
